<?xml version="1.0" encoding="utf-8"?>
<items><item><title><value>Connecting Communities: the Helmholtz Analytics Framework and the making of Heat</value></title><author><value>Claudia Comito</value></author><description><value>HPC, Scientific Big Data, co-design, Python: beneath the buzzwords,</value><value>bringing together academics from the most disparate research fields to work on a common product is no easy feat. What worked, what didn't, and lessons learned from the Helmholtz Analytics Framework experience.</value></description><date>July 2021</date><tags><value>Big Data</value><value>python</value></tags></item><item><title><value>Formalizing a Language</value></title><author><value>Jeremiah Paige</value></author><description><value>What is formal grammar, how does it create a programming language and what does Python's grammar look like. In Python 3.9 the grammar parsing engine was changed; find out some of the reasons why and what this change has allowed in terms of future language evolution.</value></description><date>July 2021</date><tags><value>CPython</value><value>Compiler and Interpreters</value><value>Python 3</value></tags></item><item><title><value>Heartbeats for Hackers</value></title><author><value>Andreas Klostermann</value></author><description><value>Pulse sensors have found their way into a surprising number of devices, and they are useful in many kinds of contexts, most of all in medical ones.</value><value>This talk will cover mostly "electrocardiography", the electrical way to listen to your heart. I will cover briefly how the heart works, how ECG sensors work and how to build a simple ECG with an Arduino or similar microcontrollers.</value><value>Then I will show you a bit about how to analyze such data and do some machine learning.</value></description><date>July 2021</date><tags><value>DIY</value><value>Data Science</value><value>Jupyter</value><value>Machine-Learning</value><value>Natural Science</value></tags></item><item><title><value>Functional Programming inside OOP? It’s possible with Python</value></title><author><value>Carlos Villavicencio</value></author><description><value>It is well known that Python 3 is an object-oriented language. But if we look back at the roots of the language, functions as first-class objects were part of the initial design. Recently, functional programming has gained considerable popularity because it is robust, concise, and easier to test. That set of benefits are not only reserved for functional pure programming languages such as Haskell.</value></description><date>July 2021</date><tags><value>Abstractions</value><value>Best Practice</value><value>Functional Programming</value><value>Python Skills</value><value>Type-Hinting</value></tags></item><item><title><value>From telemetry data to CSVs with Python, Spark and Azure Databricks</value></title><author><value>Nicolò Giso</value></author><description><value>Tenova is an engineering company working alongside client-partners to design and develop innovative technologies and services that improve their business, creating solutions that help metals and mining companies to reduce costs, save energy, limit environmental impact and improve working conditions for their employees.</value></description><date>July 2021</date><tags><value>Data</value><value>Internet of Things (IoT)</value><value>Public Cloud</value><value>Use Case</value><value>python</value></tags></item><item><title><value>Finding Magic in Python</value></title><author><value>Anna-Lena Popkes</value></author><description><value>This talk was inspired by a personal project I worked on a while ago where I created my own magical universe in order to learn and apply Python concepts I hadn’t used before. Some of these concepts are included in the talk in a clear, precise and well-explained manner, including examples from the magical universe. The talk tells a story about how our passions can be used for learning to create something magical. </value></description><date>July 2021</date><tags><value>Beginners</value><value>Data Structures</value><value>Education</value><value>Fun and Humor</value><value>Learning</value></tags></item><item><title><value>Graph neural networks for information extraction with PyTorch</value></title><author><value>Augusto Stoffel</value></author><description><value>In this talk, I will provide a primer on a class of deep learning models known as graph neural networks (GNNs).  These models generalize the well-known convolutional neural networks (CNNs) ubiquitous in computer vision, and the approach of the talk will emphasize that analogy.  Specifically, after a quick general recap on graphs, we will see how to think of an image as a graph where nodes represent pixels and edges represent the relationship of being a neighbor.  After expressing the formulas for a CNN in terms of this graph, it is not hard to imagine ways to pass from the graph of an image to arbitrary graphs.  This way, one naturally arrives at a basic GNN architecture.  Other recent advances, for instance graph attention networks, can also be surveyed, time permitting.</value></description><date>July 2021</date><tags><value>Data Science</value><value>Deep Learning</value><value>Machine-Learning</value><value>Natural Language Processing</value></tags></item><item><title><value>Getting Started with Statically Typed Programming in Python 3.10</value></title><author><value>Yoichi Takai</value></author><description><value>## Goals of this session</value></description><date>July 2021</date><tags><value>Best Practice</value><value>Development</value><value>Python general</value><value>Software Design</value><value>Type-Hinting</value></tags></item><item><title><value>Generators, coroutines, and nanoservices</value></title><author><value>Reuven Lerner</value></author><description><value>Generator functions have been a part of Python for many years already, and are a well known technique for creating iterators. But generators have a few lesser-known aspects, including their “send” method and the “yield from” syntax. Many Python developers shy away from using them, unsure of what they would do, or how they would be useful — seeing coroutines as a solution looking for a problem.</value></description><date>July 2021</date><tags><value>ASYNC / Concurreny</value><value>Python Skills</value><value>Python general</value></tags></item><item><title><value>From Research Project to PyPI Release</value></title><author><value>Griffith Rees</value></author><description><value>Halfway through my first postdoc it was clear it would be very difficult to submit a paper to a journal before my contract ended. How do I make  something useful in the time allotted that keeps me motivated enough to finish a paper after my contract ends (and useful on a CV)? Answer: package my code into a tested library via GitHub, The Python Package Index (PyPI) and Zenodo for citations.</value></description><date>July 2021</date><tags><value>Data Science</value><value>Documentation</value><value>Packaging</value><value>PyPi</value><value>Testing</value></tags></item><item><title><value>Federated Machine Learning with Python</value></title><author><value>Dhanshree Arora</value></author><description><value>Imagine a world where all the data generated on your phone and on your wearables never left these devices without compromising your user experience. Or, a world where AI collaboration between data owners and developers did not have to be slowed by bureaucracy and data compliance laws like the GDPR. Federated Machine Learning, originally introduced in 2015, aims to create this world. It is the gift of distributed computing to Artificial Intelligence for training models without compromising data privacy.</value></description><date>July 2021</date><tags><value>Data Privacy</value><value>Data Protection</value><value>Data Science</value><value>Deep Learning</value></tags></item><item><title><value>Fast native data structures: C/C++ from Python</value></title><author><value>Stefan Behnel</value><value>David Woods</value></author><description><value>Python has very fast and thoroughly optimised data structures: lists, dicts, sets and the collections module make it easy to write simple code that performs well. The flip-side shows when it comes to processing very large amounts of simple data, especially numbers or strings. For these, the object overhead of Python's objects is very large in comparison to the low-level languages C and C++ that benefit directly from bare metal CPU performance as well as from GIL-free multi-threading and parallel computation.</value></description><date>July 2021</date><tags><value>C-Languages</value><value>Compiler and Interpreters</value><value>Cython</value><value>Performance</value><value>Programming</value></tags></item><item><title><value>Faceoff Fun with Python Frameworks: FastAPI vs Flask</value></title><author><value>Tonya Sims</value></author><description><value>“All the cool kids are using FastAPI for API development.” Imagine hearing this, just as you start getting more comfortable using other frameworks, like Python’s Django or Flask, to build out your API’s. Ladies and gentlemen, there’s a new kid on the block and in this talk there’s going to be an epic faceoff between FastAPI and Flask. </value></description><date>July 2021</date><tags><value>APIs</value><value>Development</value><value>Web</value></tags></item><item><title><value>Extending Cython with GIL-free types</value></title><author><value>Xavier Thompson</value></author><description><value>Cython is a compiled language, largely inspired by Python, which can already provide both massive speedups and seamless interoperability with C libraries. In Cython, Python and C can freely mix thanks to a unified syntax and gradual typing. This opens the door to bypassing the GIL by restricting oneself to the C side of Cython, but it entails letting go of all the high-level semantics of Python and going back to low-level manual memory management, pointer arithmetic and good old segmentation faults... Not to mention all the joys of multi-threading in C!</value></description><date>July 2021</date><tags><value>C-Languages</value><value>Compiler and Interpreters</value><value>Cython</value><value>Open-Source</value></tags></item><item><title><value>Driving 3D Printers with Python</value></title><author><value>Gina Häußge</value></author><description><value>With OctoPrint I've created an open source web interface for consumer 3d printers that allows to control all aspects of the printer and ongoing print job and is extensible by plugins. OctoPrint is written in Python and installed by end users on their own devices. In this talk I want to provide some insights into the various challenges of developing and maintaining such a piece of end user facing software in Python and how I tackled them.</value></description><date>July 2021</date><tags><value>Cross-Platform-Development</value><value>Hardware/IoT</value><value>Management</value><value>Open-Source</value><value>failures/mistakes</value></tags></item><item><title><value>Documentation-driven development for Python web APIs</value></title><author><value>Jose Haro Peralta</value></author><description><value>This presentation shows how we can use documentation-driven development to minimise the risk of API integration failures. APIs are the gateways that connect our web applications to the world. Microservices rely on them to work together, and frontend applications use them to connect to our backend. Despite their importance, API integration failures are a daily occurrence. There’re many reasons for this, but a common factor is the lack of API documentation, or the use of bad API documentation.</value><value>Often, API documentation comes in unstructured formats or in JSON examples, instead of standard formats such as OpenAPI or Schema Definition Language. When we don’t use standards to document our APIs, we give up the whole ecosystem of frameworks and tools built around those standards. Such tools and frameworks are designed to make our lives easier when managing the lifecycle of our APIs.</value><value>In documentation-driven development, we write the API specification first, and then we implement the API server and the client against the specification. I’ll show how we can use mock servers to test the client while the backend is being developed, and tools like Dredd and schemathesis to validate the backend implementation. I’ll show how we can use these tools in a CI server to validate our code before it’s released. This approach doesn’t eliminate completely the risk of API integration failures, but it helps to minimise it.</value></description><date>July 2021</date><tags><value>APIs</value><value>Deployment/Continuous Integration and Delivery</value><value>RESTful</value><value>Testing</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value></tags></item><item><title><value>EuroPython 2022: Help us build the next edition!</value></title><author><value>Marc-Andre Lemburg</value></author><description><value>We need help with organizing and running EuroPython 2022.</value></description><date>July 2021</date><tags><value>Community</value><value>EuroPython</value><value>EuroPython Society (EPS)</value></tags></item><item><title><value>The Pattern: Machine Learning Natural Language Processing meets VR/AR</value></title><author><value>Alexander Mikhalev</value><value>Dvir Dukhan</value></author><description><value>Open-source project "The Pattern" is the platform to inspire collaboration for building modern natural language processing tools and techniques and making them practically useful for end-users. In this session, I will walk through creating 3 Machine Learning NLP pipelines and deploying them using Redis and Redis Modules: RedisGears, RedisGraph and RedisAI. </value><value>The first pipeline demonstrates how to use traditional NLP techniques, such as the Aho-Corasic algorithm to build a knowledge graph from medical literature using a medical thesaurus (UMLS).</value><value>The second pipeline demonstrates how to build and deploy BERT Question/Answering model and create API for text to speech interface. Leveraging Redis Cluster sharding and capturing Redis Gears "keymiss" event to trigger processing of BERT QA in RedisAI.</value><value>The third pipeline demonstrates how to deploy Google's T5 (text to text transfer transformers) to build summary of each article.</value></description><date>July 2021</date><tags><value>Big Data</value><value>Data Science</value><value>Data-Structures</value><value>Deep Learning</value><value>Distributed Systems</value></tags></item><item><title><value>Data Ingestion and Big Data</value></title><author><value>Mauro Pelucchi</value></author><description><value>Web scraping, crawling and API are the first step to retrieve information to use for analysis </value><value>and to start a new business.</value><value>In this tutorial I'll show you how to use python to set up scraping and crawling processes,</value><value>how to simulate users navigation and browser behavior with a ghost browser and how to hook up and use data APIs.</value><value>I will also try to explain the technical and ethical aspects that we have to consider when we approach these kinds of challenges.</value></description><date>July 2021</date><tags><value>Big Data</value><value>Data Science</value><value>Web Crawling</value><value>python</value></tags></item><item><title><value>Creative Coding with imagiLabs</value></title><author><value>Paula Dozsa</value></author><description><value>imagiLabs is an EdTech startup based in Stockholm, on a mission to equip and empower girls to engage with tech. We created the imagiCharm, a programmable smart accessory, so that code and be brought to life and shown off! The imagiLabs app (iOS, Android, and web) is a truly social, inclusive platform for teenage girl coders to develop their skills. We also partner with schools, non-profits, and coding companies to bring groups of students our innovative coding curriculum. </value></description><date>July 2021</date><tags><value>Beginners</value><value>Community</value><value>PyLadies</value><value>Python Skills</value><value>Wearables</value></tags></item><item><title><value>qutebrowser: A keyboard-driven, vim-like browser</value></title><author><value>Florian Bruhin</value></author><description><value>The qutebrowser project is a fully-fledged web browser, implemented in Python. It uses Qt's QtWebEngine, which is based on Chromium, the open-source project behind Google Chrome.</value></description><date>July 2021</date><tags><value>Community</value><value>Internet</value><value>PyQt</value><value>Web</value><value>freelancing</value></tags></item><item><title><value>Multitask Reinforcement Learning with Python</value></title><author><value>Shagun Sodhani</value></author><description><value>Reinforcement Learning (RL) has led to several groundbreaking innovations, from defeating the world champion of Go to synthesizing molecules and drugs. RL has benefitted from a mature ecosystem of open-source frameworks that have enabled more and more people to use RL for their use cases. A subdomain of RL is multi-task RL, where the agent should perform multiple tasks at once. However, there are far fewer resources for people to start with multi-task RL, and very often, people have to implement all the components from scratch.</value></description><date>July 2021</date><tags><value>Deep Learning</value><value>Machine-Learning</value></tags></item><item><title><value>Understanding Decorators and Context Managers</value></title><author><value>Mike Müller</value></author><description><value>Python offers several advanced concepts. It is possible to write useful Python programs without them.  But if you want to really understand how Python works and how to write  pythonic programs, you should know how to write decorators and context managers.</value></description><date>July 2021</date><tags><value>Best Practice</value><value>Programming</value><value>Python 3</value><value>Python Skills</value><value>Python general</value></tags></item><item><title><value>Python Packaging Demystified</value></title><author><value>Bernat Gabor</value></author><description><value>For most developers, Python packaging feels like a magical (and cryptic) black box. Apps and libraries use a variety of tools and have different packaging challenges. Once you start reading up on this topic, you come across many seemingly random components: setuptools, pip, poetry, wheels, pyproject.toml, MANIFEST.in, virtual environments, zippapp, shiv, pex, and so on. The sheer number of concepts to master can be overwhelming, leading many programmers to conclude that packaging in Python is a mess. Before you despair, join me in this tutorial session where you'll have a chance to learn how to package and publish/deploy your library and/or application through hands-on exercises.</value></description><date>July 2021</date><tags><value>Packaging</value></tags></item><item><title><value>Transcend the realms of development - A day in life of a software architect</value></title><author><value>Anastasiia Tymoshchuk</value><value>Bojan Miletic</value></author><description><value>In this workshop we plan to walk you from initial idea to fully fledged system architecture using Domain Driven Design. You will learn in practice how to create systems with low coupling and high cohesion. </value></description><date>July 2021</date><tags><value>Abstractions</value><value>Architecture</value><value>Engineering</value><value>Software Design</value><value>System Architecture</value></tags></item><item><title><value>The Anatomy of a Python Class</value></title><author><value>Samuel Farrens</value></author><description><value>Classes are one of the fundamental building blocks of Python and are essential for object-oriented programming. In this tutorial we will explore how classes work and look at tips and tricks for getting the most out of them. By the end you should have, not only a much better understanding of what Python classes are, but also some new ideas for writing better code.</value></description><date>July 2021</date><tags><value>Programming</value><value>Python Skills</value><value>python</value></tags></item><item><title><value>Speedrunning Web Development: A Full Stack App in 10 minutes</value></title><author><value>Eli Holderness</value></author><description><value>In this workshop, we'll each build and deploy a fully featured web app from scratch. Using Anvil, the platform for full-stack web development with nothing but Python (including the client code!), we'll go from `hello world` to production-ready in record time.</value></description><date>July 2021</date><tags><value>Internet</value><value>Open-Source</value><value>Python Skills</value><value>Python general</value><value>Web</value></tags></item><item><title><value>Introduction to pytest</value></title><author><value>Florian Bruhin</value></author><description><value>The pytest tool presents a rapid and simple way to write tests for your Python code. This training gives an introduction with exercises to some distinguishing features. We'll also examine how to run existing non-pytest test suites and discuss migration strategies. Various plugins which extend pytest's functionality even further will be introduced. We'll finish with discussing topics and questions of participants related to their own test suites and usages.</value></description><date>July 2021</date><tags><value>Test Libraries (pytest/nose/...)</value><value>Testing</value></tags></item><item><title><value>Knowledge graph data modelling with TerminusDB</value></title><author><value>Cheuk Ho</value></author><description><value>Storing data in a tabular format is not always ideal. Taking advantage of strong data in knowledge graphs can make handling complex data structure possible and data visualization easier. In this workshop, you will get all the basics to start modelling data in the terms of triples and building schemas of a knowledge graph.</value></description><date>July 2021</date><tags><value>Databases</value><value>Graph Databases</value><value>python</value></tags></item><item><title><value>Introduction to Property-Based Testing</value></title><author><value>Zac Hatfield Dodds</value></author><description><value>Tests can be helpful: they can find bugs in new code, check for regressions in old code, and clarify precisely what the code is meant to do. But writing tests is tedious - and it's rare to think of an error when testing that you forgot when writing the code.  My solution? Use tools that write tests for you!</value></description><date>July 2021</date><tags><value>Best Practice</value><value>Test Libraries (pytest/nose/...)</value><value>Testing</value><value>Tooling</value></tags></item><item><title><value>Implementing a Neural Network from Scratch</value></title><author><value>Rodrigo Girão Serrão</value></author><description><value>The fact that you can just install a library and train machine learning models straight away is amazing, to say the least.</value><value>However, if your purpose is to learn how the models work, writing `import pytorch` will not do much for you.</value></description><date>July 2021</date><tags><value>Data Science</value><value>Deep Learning</value><value>Engineering</value><value>Machine-Learning</value><value>Science</value></tags></item><item><title><value>Docker for Machine Learning Engineers</value></title><author><value>Jonathan Fernandes</value></author><description><value>In the first section we'll look at understanding why Docker matters to Machine learning engineers. We then proceed with understanding one of the building blocks of Docker - the Docker image.</value></description><date>July 2021</date><tags><value>Data Science</value><value>Machine-Learning</value></tags></item><item><title><value>GPU development with Python 101</value></title><author><value>Jacob Tomlinson GB</value><value>Graham Markall</value></author><description><value>I joined NVIDIA in 2019 and I was brand new to GPU development. In that time, I’ve gotten to grips with the fundamentals of writing accelerated code in Python. I was amazed to discover that I didn’t need to learn C++ and I didn’t need new development tools. Writing GPU code in Python is easier today than ever, and in this tutorial, I will share what I’ve learned and how you can get started with accelerating your code.</value></description><date>July 2021</date><tags><value>Beginners</value><value>GPU</value><value>Learning</value><value>Open-Source</value><value>Software Design</value></tags></item><item><title><value>Creating 2D Applications and Games</value></title><author><value>Martin Christen</value></author><description><value>Do you want to create fancy 2D dashboards for streaming or know how to create games? Then this tutorial is the best way to get started.</value></description><date>July 2021</date><tags><value>Game-Development</value><value>Open-Source</value><value>Visualization</value></tags></item><item><title><value>Climate data analysis with xarray and cartopy</value></title><author><value>Mia Polovina</value></author><description><value>This training aims to introduce the audience with climate data analysis using Python libraries xarray and cartopy.</value></description><date>July 2021</date><tags><value>Python Skills</value><value>Visualization</value></tags></item><item><title><value>Data Analysis with pandas - Workshop</value></title><author><value>Marco Bonzanini</value></author><description><value>This is a hands-on workshop to help the audience getting familiar with pandas, one of the main Python libraries for data analytics.</value></description><date>July 2021</date><tags><value>Data</value><value>Data Science</value></tags></item><item><title><value>Django Girls Workshop</value></title><author></author><description><value>If you are a woman and want to learn how to make websites, we have good news for you: we are holding a workshop for beginners!</value></description><date>July 2021</date><tags><value>Django</value><value>Django Projects</value><value>Django-Girls</value></tags></item><item><title><value>Building a practical Slack bot with Python &amp; FastAPI</value></title><author><value>Radoslav Georgiev</value></author><description><value>Slack is a great tool for team communications, and sometimes, we want to fit our existing company workflows and needs within it.</value></description><date>July 2021</date><tags><value>APIs</value><value>Case Study</value><value>Python 3</value><value>Use Case</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value></tags></item><item><title><value>Build and deploy PyTorch models with Azure Machine Learning</value></title><author><value>Henk Boelman</value></author><description><value>After a tremendous age of innovation and research in the AI field, we are moving towards the age of appliance. But how and where do you get started as a developer?</value><value>In this workshop we dive into the AI platform on Microsoft Azure and find out how you as a developer you can use the power of AI in your applications.</value></description><date>July 2021</date><tags><value>Data Science</value><value>Machine-Learning</value><value>python</value></tags></item><item><title><value>Build a deep learning-powered image search system with Jina + BigTransfer (BiT)</value></title><author><value>Cristian Mitroi</value><value>Maximilian Werk</value></author><description><value>From scientific applications to consumer software to internal systems in the enterprises, deep learning technology is transforming how we interact with and make use of all the data. Especially with the rapid growth of media and metadata in these sectors, there is an evolving need for search systems to go beyond the conventional search approach (symbolic search) and towards semantic search, or neural search. </value></description><date>July 2021</date><tags><value>Computer Vision</value><value>Data Science</value><value>Deep Learning</value><value>Machine-Learning</value></tags></item><item><title><value>Beginners’ Day run by HumbleData</value></title><author></author><description><value>We are Humble Data</value><value>We aim to increase inclusivity and provide a safe community for Python and Data Science. We organise free workshops for people who are outside of the mainstream in the data science and tech industry. We encourage past participants to become mentors and even organise their own workshop one day. We are building a community where people can help and learn from each other. Remember to stay humble!</value></description><date>July 2021</date><tags><value>Beginners</value><value>EuroPython</value><value>python</value></tags></item><item><title><value>Activate Your Interest in Coding for Algorithmic Trading</value></title><author><value>Adam Kasperowicz</value><value>Julian Brendl</value><value>Gregory Pandechis</value></author><description><value>Ready to learn about algorithmic trading from the inside out? Optiver invites Python developers to dive deep into the technical systems that power Optiver, a leading global market maker. Optiver contributes to efficient, transparent and healthy markets by accurately pricing financial products on 50+ exchanges around the world. In order to continuously generate accurate prices, the firm builds and relies on sophisticated Python models. Want to push your skills to the limit? Let’s see if you’ve got what it takes to program under the pressure of the markets.</value></description><date>July 2021</date><tags><value>Algorithms</value><value>Data</value><value>python</value></tags></item><item><title><value>Writing Better Documentation for Developers</value></title><author><value>Meredydd Luff</value></author><description><value>If you're building something for developers, you want it to get *used*. This means your potential users need to find your library, framework, or API. They need to work out whether it's useful for them, learn how to use it, and solve problems they encounter along the way. All these things depend on your developer docs!</value></description><date>July 2021</date><tags><value>Communication</value><value>Community</value><value>Development</value><value>Documentation</value><value>Teaching</value></tags></item><item><title><value>Writing a python web framework in 2021</value></title><author><value>Emmanuelle Delescolle</value></author><description><value>Django, Flask and Pyramid are among the most popular Python web frameworks and for good reasons.</value></description><date>July 2021</date><tags><value>APIs</value><value>Case Study</value><value>Development</value><value>Web</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value></tags></item><item><title><value>Wildfire Modeling in Yosemite National Park</value></title><author><value>Abraham Coiman</value></author><description><value>In this talk, we will show you the use of GRASS GIS (Geographic Resources Analysis Support System - Geographical Information System) and other geospatial Python libraries within a Jupyter Notebook to simulate wildfire spread in Yosemite National Park California USA.  We will also show you a straightforward workflow to obtain and save input geospatial data for wildfire simulation using Google Earth Engine (GEE) Python API, GeoPandas, and geemap (a Python package for interactive mapping with GEE). GRASS GIS commands are generally run into bash shells, thus in this talk, we will demonstrate how we run GRASS GIS commands from Jupyter notebook to model wildfire behavior and display the resulting maps. We expect the audience has a basic understanding of GIS, Remote Sensing, and Python programming.</value></description><date>July 2021</date><tags><value>Case Study</value><value>Data Science</value><value>GEO and GIS</value><value>Jupyter</value><value>Python 3</value></tags></item><item><title><value>Why You Should Consider Getting a Python Pet Project</value></title><author><value>Christian Burger</value></author><description><value>If you are managing developer teams or departments a pet project may be a helpful tool to stay out of your developers hair and learn about the technologies used in your department without blocking your developers to babysit you.</value></description><date>July 2021</date><tags><value>Case Study</value><value>Management</value></tags></item><item><title><value>Why you always had trouble understanding metaclasses</value></title><author><value>Antonis Christofides</value></author><description><value>"Smart people sometimes like to show off their smarts</value><value>    by demonstrating their mental juggling abilities. After all,</value><value>    if you can reliably remember that r is the lower-cased</value><value>    version of the url with the host and scheme removed,</value><value>    then you must clearly be very smart.</value></description><date>July 2021</date><tags><value>Clean Code</value><value>Documentation</value><value>Meta Classes</value><value>Programming</value></tags></item><item><title><value>We build a ML pipeline after we deploy</value></title><author><value>Alyona Galyeva</value></author><description><value>This talk covers the importance of building end-to-end machine learning pipelines from day one. </value></description><date>July 2021</date><tags><value>Data Science</value><value>Engineering</value><value>Machine-Learning</value><value>Python 3</value></tags></item><item><title><value>Virtual Tourism In Covid Times</value></title><author><value>Nithish Raghunandanan</value></author><description><value>The introduction to the talk would cover the motivation for the solution. As someone who loves to travel and has been travelling quite extensively in Europe over the past years, the lockdown &amp; travel restrictions preventing travels are quire hard to adjust to. This gave me the idea to build a dashboard around my past travels to improve my spirits. </value></description><date>July 2021</date><tags><value>Analytics</value><value>Big Data</value><value>Tooling</value><value>Visualization</value></tags></item><item><title><value>Type Check your Django app</value></title><author><value>Kracekumar</value></author><description><value>Python 3 introduced type hints and it's optional to use. </value><value>The decision to use the type-hints in the python community is in two different camps - Embrace and skeptical.</value></description><date>July 2021</date><tags><value>APIs</value><value>Django</value><value>Type-Hinting</value></tags></item><item><title><value>Traveling through a secure API in Python</value></title><author><value>Jessica Temporal</value></author><description><value>I like to remember the places I have been and I always liked the idea of having a map of those places, so as any developer would do, I built a web application for that.  </value></description><date>July 2021</date><tags><value>APIs</value><value>python</value></tags></item><item><title><value>Towards a sustainable solution to open source sustainability</value></title><author><value>Tobie Langel</value></author><description><value>A few years ago, Heartbleed epitomized a massive open source sustainability problem for critical parts of the internet infrastructure. The bug, which affected the popular OpenSSL cryptographic software library, notably compromised the confidentiality of 4.5 million US patient records and cost the industry an estimated $500M.</value></description><date>July 2021</date><tags><value>Beginners</value><value>Business</value><value>Open-Source</value><value>Programming</value></tags></item><item><title><value>The spec you never knew you needed</value></title><author><value>Andy Fundinger</value></author><description><value>Many of the systems we build fail to account for performance, error rates, data correctness, or other customer reliability needs. This talk discusses the basics of service level objectives by comparing them to ordinary functional specifications. It also serves as an introduction to System Reliability Engineering (SRE).</value></description><date>July 2021</date><tags><value>Best Practice</value><value>Engineering</value></tags></item><item><title><value>Thoughts on the Future of Python</value></title><author><value>Marc-Andre Lemburg</value></author><description><value>Python has come a long way since it was created in 1989. The talk will look into the current state, upcoming changes and explore possibilities for its future development, both at a language and application level.</value></description><date>July 2021</date><tags><value>Business</value><value>Development</value><value>Engineering</value><value>New Features</value><value>Python general</value></tags></item><item><title><value>The Optimal Wedding (With Pyomo)</value></title><author><value>Tarik Berrada</value></author><description><value>Your parents haven’t talked to each other for years. Your uncle Sam went to the same university as Mr. Finkelstein, while the Trautsohns share a common interest for photography with the Krazinskis. The N’Guyens had Covid, while the Lefebvres aren’t even vaccinated. You would like to achieve a reasonable mix of people knowing each other and of new acquaintances. How are you supposed to arrange the seating of the guests?</value></description><date>July 2021</date><tags><value>Science</value><value>python</value></tags></item><item><title><value>The Libre-SOC Project</value></title><author><value>Luke Leighton</value></author><description><value>The Libre-SOC Project aims to bring to market a mass-volume System-on-a-Chip suitable for use in smartphones netbooks tablets and chromebooks, which is end-user programmable right to the bedrock. No spying backdoors, no treacherous DRM.</value></description><date>July 2021</date><tags><value>3D</value><value>Compiler and Interpreters</value><value>Mind Bending</value><value>Other Hardware</value><value>The Answer to Life the Universe and Everything Else</value></tags></item><item><title><value>The Myth of Neutrality: How AI is widening social divides</value></title><author><value>Stefanie Stoppel</value></author><description><value>Imagine you're a Black woman having your face not recognized by a government photo booth, no matter how you position yourself in front of the camera.</value><value>Imagine you're a woman getting your loan request rejected, while your partner - who has a similar income and credit history - gets his approved.</value><value>Imagine you're an African American man arrested by the police because your face was mistakenly matched to a guy involved in an armed robbery.</value></description><date>July 2021</date><tags><value>Data</value><value>Data Science</value><value>Deep Learning</value><value>Ethics</value><value>Machine-Learning</value></tags></item><item><title><value>Tech for Good: Build the world you want to live in</value></title><author><value>Alexys Jacob</value><value>Sébastien Crocquevieille</value><value>Romain Meson</value><value>Margaux Levisalles</value><value>Brieuc Le Bars</value></author><description><value>Through its 1000mercis Impacts initiative, Numberly has been actively working with tech and non tech associations over the years for social, environmental and educational causes. </value></description><date>July 2021</date><tags><value>Community</value></tags></item><item><title><value>Taming Nondeterminism with Dependency Injection</value></title><author><value>Haki Benita</value></author><description><value>There are many sources of nondeterminism in code such as randomness, IO, environment variables, databases and many more. Nondeterminism is a source of confusion, and it makes testing difficult. One way to control nondeterminism is using the dependency injection pattern.</value></description><date>July 2021</date><tags><value>Development</value><value>Programming</value><value>Software Design</value><value>Testing</value></tags></item><item><title><value>Sweeter debugging and benchmarking with ycecream</value></title><author><value>Ruud van der Ham</value></author><description><value>Even if you use a debugger, it is often required to print some variables or expressions, preferably with their name and sometimes even the location. </value><value>The normal way to do that is with a print statement, like</value><value>|    print("hello= ", hello)</value><value>or with Python &gt;= 3.8:</value><value>|    print(f"hello=")</value><value>Ycecream makes this easier with a simple call to y:</value><value>|   y(hello)</value><value>and then you will get</value><value>|   y| hello: "world"</value><value>But you can also add the location in the program where this debug call is coming and get something like</value><value>|    y| #6 in testproc() hello: "world"</value></description><date>July 2021</date><tags><value>Debugging</value><value>General</value><value>Performance</value><value>Python general</value><value>Tooling</value></tags></item><item><title><value>Streamlit: The Fastest Way to build Data Apps</value></title><author><value>Steven Kolawole</value></author><description><value>When we think about building Python-based data science apps, we think of Flask. But there is a better option now. Streamlit.</value></description><date>July 2021</date><tags><value>Data Science</value><value>Machine-Learning</value><value>Natural Language Processing</value><value>Python 3</value><value>Visualization</value></tags></item><item><title><value>Stop Writing Tests!</value></title><author><value>Zac Hatfield Dodds</value></author><description><value>We often think of manual testing as slower and less effective than automated testing, but most test suites haven't automated that much! Computers can execute all our pre-defined tests very quickly - and this is definitely a good thing, especially for regression tests - but the tricky parts are still done by humans. We select test cases (inputs) and check that the corresponding outputs make sense; we write functions that "arrange, act, and assert" for our tests; and we decide - or script via CI systems - which tests to execute and when. So lets explore some next-generation tools that we could use to automate these remaining parts of a testing workflow!</value></description><date>July 2021</date><tags><value>Best Practice</value><value>TDD</value><value>Test Libraries (pytest/nose/...)</value><value>Testing</value><value>Tooling</value></tags></item><item><title><value>SQLite, an (un) known super ant</value></title><author><value>María Andrea Vignau</value></author><description><value>Outline</value><value>Introduction: advantages, best and worst use cases.</value><value>Why this little database is amazing and where it can be used at its best.</value><value>SQLite &amp; Python: best practices</value><value>Use of context managers, row factories, executing many operations at once and the concept of PRAGMAs</value><value>Transactions, isolation and concurrency</value><value>Transactions management in SQLite, use of WAL, Rollback and no journaling modes. Isolation levels: exclusive, immediate and deferred</value><value>Indexing</value><value>Why and why not indexing. Partial index, expression index, FTS index.</value><value>Special data types</value><value>Date &amp; Time data, personalized data types</value></description><date>July 2021</date><tags><value>Algorithms</value><value>Best Practice</value><value>Databases</value><value>Python general</value></tags></item><item><title><value>Speeding up the deep learning development life cycle for cancer diagnostics</value></title><author><value>Marc Päpper</value></author><description><value>An important, but often overlooked aspect of developing a high-quality deep learning model is the iteration speed.</value><value>If you can iterate faster, you can try out more ideas and over time you get better results.</value><value>In this talk, you will learn about the different tricks you can use to train a great machine learning model in a shorter amount of time.</value><value>In particular, I will discuss how we optimized our deep learning development life cycle at Mindpeak to create robust deep learning models for cancer diagnostics that work in vastly different laboratory settings.</value></description><date>July 2021</date><tags><value>Computer Vision</value><value>Deep Learning</value><value>Development</value><value>GPU</value><value>Machine-Learning</value></tags></item><item><title><value>Sound Event Detection with Machine Learning</value></title><author><value>Jon Nordby</value></author><description><value>Sound Events (or Audio Events or Acoustic Events) are individual distinct sounds.</value><value>This could be the pop of roasting popcorn kernels,</value><value>the cough of a patient, a car that is passing by on a road,</value><value>or the sound of an alarm in an office building.</value><value>Sound Event Detection (SED) is the task of detecting such sounds,</value><value>returning precise times that each kind (class) of sound occurs.</value><value>It finds uses in music analysis, manufacturing, medicine and noise monitoring.</value></description><date>July 2021</date><tags><value>Data</value><value>Data Science</value><value>Machine-Learning</value><value>Sensors</value></tags></item><item><title><value>Simple, open, music recommendations</value></title><author><value>Sam Thursfield</value></author><description><value>Can simple open source tools compete with the music recommendations provided by Spotify and other big names?</value></description><date>July 2021</date><tags><value>Algorithms</value></tags></item><item><title><value>Sliding into Causal Inference, with Python!</value></title><author><value>Alon Nir</value></author><description><value>What would the world look like if Russia won the cold war? If the Boston Tea Party never happened? And where would we be if Guido van Rossum had decided to go to music school? Unfortunately we don't have the technology to slide into parallel worlds and explore alternative histories. However it turns out we *do* have the tools to simulate parallel realities and give decent answers to intriguing 'what if' questions. This talk will provide a gentle introduction to these tools, professionally known as Causal Inference.</value></description><date>July 2021</date><tags><value>Data Science</value><value>Predictions</value><value>Science</value><value>The Answer to Life the Universe and Everything Else</value><value>Tooling</value></tags></item><item><title><value>Should We Return to Python 2?</value></title><author><value>Miroslav Šedivý</value></author><description><value>Migration to Python 3 is over, but that's not the end of the journey. Although your code runs with the currently supported Python 3.6 to 3.9, there may be some pieces of code that look obvious to you, but may surprise younger developers who have never seen Python 2 code.</value></description><date>July 2021</date><tags><value>Clean Code</value><value>Development</value><value>New Features</value><value>Python 2</value><value>Python 3</value></tags></item><item><title><value>Sentry as a way not to be afraid</value></title><author><value>Irina Grechikhina</value></author><description><value>Sentry is an open-source error tracking software. It allows you to know exactly what's going on with your web application in real-time and get detailed reports about occurred errors. Lot's of web developers used to rely only on app logs and generic monitoring software, but it's not enough. Multiple production servers, overwhelmed logging, lack of information about request content in case of error hinders problem investigation and produces permanent developer fear of changes. Sentry could ease the whole process and make you: stay calm during deployment, be sure your application works properly, solve problems before users report about it.</value></description><date>July 2021</date><tags><value>Debugging</value><value>Development</value><value>HTTP</value><value>Web</value></tags></item><item><title><value>Reproducible and Deployable Data Science with Open-Source Python</value></title><author><value>Lim H.</value></author><description><value>Data scientists, data engineers and machine-learning engineers often have to team together to create data science code that scales. Data scientists typically prefer rapid iteration, which can cause friction if their engineering colleagues prefer observability and reliability. </value></description><date>July 2021</date><tags><value>Data</value><value>Data Science</value><value>Development</value></tags></item><item><title><value>Refactoring legacy Django app using OOP</value></title><author><value>Sebastian Buczyński</value></author><description><value>Every year we can hear rumours about the demise of Object-Oriented Programming. As usual, they are greatly exaggerated. In 2021 OOP still has a lot to offer. The problem is a shortage of good quality materials that would show where it shines and how a Pythonista can leverage it without writing code that looks like Java from the 00s.</value></description><date>July 2021</date><tags><value>Clean Code</value><value>TDD</value><value>legacy-code</value></tags></item><item><title><value>Python Versions and Dependencies Made Easy</value></title><author><value>Sebastian Witowski</value></author><description><value>Managing Python versions and dependencies can be painful. JavaScript developers have their "node_modules" folders, but we don't have "python_modules" (yet!) in Python. Instead, we have those mysterious virtual environments. And if you also want to switch between different Python versions, it can quickly turn into a mess.</value></description><date>July 2021</date><tags><value>Development</value><value>Tooling</value><value>Virtual Env</value></tags></item><item><title><value>Python security best practises</value></title><author><value>Michał Wodyński</value></author><description><value>Have you ever have a feeling that you are able to write code that solves problem but your not sure whether is safe? How much of your time you spend on investigating whether your code is not vulnerable ? Do you know what kind of risks you can face during parsing XML files? If those questions appeared into your mind this presentation will clarify your doubts and bring your skills closer to writing more safe code. There are many repeatable routines during developing code like: saving user data, reading files or pickles. Those routines can lead to a drop in vigilance which may lead to very terrible consequences for our application or data.</value></description><date>July 2021</date><tags><value>Best Practice</value><value>Programming</value><value>Python 3</value><value>Security</value><value>Tooling</value></tags></item><item><title><value>Python RPC and PubSub over Websockets</value></title><author><value>Or Weis</value></author><description><value>Modern distributed software doesn't stop at your VPC. Edge deployed software needs realtime communications, updates, and state sync. It needs RPC and PubSub over the web. Lets make it open-source.</value></description><date>July 2021</date><tags><value>APIs</value><value>ASYNC / Concurreny</value><value>Communication</value><value>Distributed Systems</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value></tags></item><item><title><value>Python monorepos: what, why and how</value></title><author><value>Benjy Weinberger</value></author><description><value>As organizations and repos grow, we have to choose how to manage codebases in a scalable way. We have two architectural alternatives:</value></description><date>July 2021</date><tags><value>Architecture</value><value>Best Practice</value><value>Clean Code</value><value>Development</value><value>Engineering</value></tags></item><item><title><value>Python Data Science with VS Code and Azure</value></title><author><value>Sid Unnithan</value><value>Claudia Regio</value></author><description><value>Learn how Native Notebooks in VS Code can supercharge your data science workflow and how to follow up your deployment of machine learning models using the Azure Machine Learning service!</value></description><date>July 2021</date><tags><value>Data Science</value><value>Machine-Learning</value><value>python</value></tags></item><item><title><value>Python Anti-Patterns</value></title><author><value>Vinicius Gubiani Ferreira</value></author><description><value>Most people heard at least once or focused really hard on studying design patterns. But did you know there are also lots of anti-patterns we should try to avoid?</value></description><date>July 2021</date><tags><value>Best Practice</value><value>Clean Code</value><value>Python general</value><value>Software Design</value><value>python</value></tags></item><item><title><value>Pydon'ts</value></title><author><value>Rodrigo Girão Serrão</value></author><description><value>EDIT: Talk slides available at </value><value>; you can reach out to me with comments/questions on Twitter @mathsppblog or through email at rodrigo at mathspp dot com.</value></description><date>July 2021</date><tags><value>Abstractions</value><value>Best Practice</value><value>Clean Code</value><value>Python Skills</value><value>Python general</value></tags></item><item><title><value>Python and Flutter application for Colouring and Enhancing Old Photos</value></title><author><value>Utkarsh Mishra</value></author><description><value>A photo is an image that represents an external form of a person or a thing from the past. It communicates any past incident or activity to the present or future, reminding them of the melodious memories they have.</value></description><date>July 2021</date><tags><value>APIs</value><value>Computer Vision</value><value>Deep Learning</value><value>Image Processing</value><value>Machine-Learning</value></tags></item><item><title><value>PyAutoFit: A Classy Probabilistic Programming Language For Data Science</value></title><author><value>James Nightingale</value></author><description><value>A major trend in data science is the rapid adoption of Bayesian statistics for data analysis and modeling. With modern data-sets growing by orders of magnitude in size, the focus is now on developing methods capable of applying contemporary inference techniques to extremely large datasets. To this aim, I present PyAutoFit (</value><value>), an open-source probabilistic programming language for automated Bayesian inference that was recently published in the Journal of Open Source Software (</value><value>).</value></description><date>July 2021</date><tags><value>Big Data</value><value>Data Science</value><value>Open-Source</value><value>Science</value></tags></item><item><title><value>Protecting Your Machine Learning Against Drift: An Introduction</value></title><author><value>Oliver Cobb</value></author><description><value>Deployed machine learning models can fail spectacularly in response to seemingly benign changes to the underlying process being modelled. Concerningly, when labels are not available, as is often the case in deployment settings, this failure can occur silently and go unnoticed.</value></description><date>July 2021</date><tags><value>Beginners</value><value>Data Science</value><value>Deep Learning</value><value>Machine-Learning</value><value>failures/mistakes</value></tags></item><item><title><value>Production ML Monitoring: Outliers, Drift, Explainers &amp; Statistical Performance</value></title><author><value>Alejandro Saucedo</value></author><description><value># Session Description</value></description><date>July 2021</date><tags><value>Best Practice</value><value>Data Science</value><value>DevOps general</value><value>Machine-Learning</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>Powerful tests and reproducible benchmarks with `pytest-cases`</value></title><author><value>Sylvain Marié</value></author><description><value>`pytest` is undoubtedly the most popular test framework for python. Its fixture and parametrization mechanisms, as well as its detailed hook API and vibrant plugin ecosystem make it a must-know for any developer wishing to create quality software. Some key limitations in its engine and API, however, prevent users from truly unleashing their testing scenarii. Creating tests with complex parametrization is complicated, and users trying to explore this direction may loose the legendary elegance and maintainability of pytest tests on the way.</value></description><date>July 2021</date><tags><value>Data</value><value>Data Science</value><value>Science</value><value>Test Libraries (pytest/nose/...)</value><value>Testing</value></tags></item><item><title><value>Pointers? In my Python? It's more likely than you think</value></title><author><value>Eli Holderness</value></author><description><value>Ever wondered about the difference between `is` and `==`, or why you might need to use `deepcopy`? Maybe you’ve been stumped by an interview question about object lifetimes, or overriding the `__eq__` method. Or, perhaps, you just really want to see some tuples behaving badly. </value></description><date>July 2021</date><tags><value>Abstractions</value><value>Beginners</value><value>CPython</value><value>Compiler and Interpreters</value><value>Python general</value></tags></item><item><title><value>Personal growth and the Python community</value></title><author><value>Yashasvi Misra</value></author><description><value>I owe both my personal and professional growth to communities. As an engineering student in computer science, the first open tech community I joined was PyLadies. I have since then been actively involved in the Python community, always trying to learn and grow. Little did I expect how beneficial that would be. In this session, I will share my journey with the Python community, the impact it had on me, and how it boosted my self-confidence. If you don’t know where to start, join me to explore what I have learned so far.</value></description><date>July 2021</date><tags><value>Beginners</value><value>Community</value><value>Diversity</value><value>PyLadies</value><value>python</value></tags></item><item><title><value>Pattern Matching in Python</value></title><author><value>Daniel Moisset</value></author><description><value>When Python 3.10 comes out in October 2021, it will include a new feature called “Structural Pattern Matching”. Structural Pattern Matching has been a staple of functional programming languages, but it has recently appeared or been proposed as future additions to imperative and OOP programming languages (like JavaScript, C++, and Rust). It provides an elegant way of processing and deconstructing heterogeneous data structures, and it enables an alternative paradigm to method dispatch.</value></description><date>July 2021</date><tags><value>CPython</value><value>Functional Programming</value><value>New Features</value><value>Python general</value></tags></item><item><title><value>Moving Fast with FastAPI</value></title><author><value>David Bordeynik</value></author><description><value>FastAPI is the new kid on python’s web frameworks block.</value><value>Don’t let its novelty fool you - it is feature packed and it has top notch documentation.</value><value>In this talk, we’ll build an application using FastAPI - leveraging our knowledge from existing frameworks. We’ll see how the “fast” FastAPI is for fast development.</value></description><date>July 2021</date><tags><value>APIs</value><value>ASYNC / Concurreny</value><value>Best Practice</value><value>Development</value><value>Web</value></tags></item><item><title><value>Measuring memory: Python memory profilers and when to use them</value></title><author><value>Itamar Turner-Trauring</value></author><description><value>If your program is using too much memory, it can crash, thrash, or just run more slowly. To reduce memory usage, you need to measure it somehow.</value></description><date>July 2021</date><tags><value>Data</value><value>Debugging</value><value>Performance</value></tags></item><item><title><value>Leveraging Linked Data using Python and SPARQL</value></title><author><value>Nabanita Roy</value></author><description><value>Wikipedia is the digital encyclopedia that we use daily to find out facts and information. What could be better than being able to extract the extreme wealth of crowd-sourced knowledge from Wikipedia without using traditional web scrapers? Various community-driven projects extract knowledge from Wikipedia and stores them structurally, retrievable using SPARQL. It can be used to mine data for a range of Data Science projects. In this talk, I will walk through the basics of the Open Web and how to use Python to use this huge open database.</value><value>The agenda includes the following:</value><value>•	Why Wikipedia?</value><value>•      Introduction to DBpedia and Wikidata</value><value>•      Introduction to Linked Data</value><value>•      How to query DBpedia/WikiData</value><value>      o	Build SPARQL Query</value><value>      o	Use Python’s SPARQLWrapper</value><value>•	Python Code Walkthrough to create</value><value>      o	A Tabular Dataset using SPARQL</value><value>      o	A Corpus for Language Models using Wikipedia and BeautifulSoup</value><value>      o	An Use-Case leveraging both SPARQLWrapper and Wikipedia to Create Domain-Specific Corpus </value></description><date>July 2021</date><tags><value>Case Study</value><value>Data Science</value><value>Databases</value><value>Natural Language Processing</value><value>Web</value></tags></item><item><title><value>Learn Python automation by recreating Git Commit from scratch</value></title><author><value>Matteo Bertucci</value></author><description><value>This talk is divided in two parts: the first one will explore how the Git key-value storage work and the second part will walk through recreating the fundamental `git commit` command with less than 80 lines of Python.</value></description><date>July 2021</date><tags><value>Beginners</value><value>Best Practice</value><value>Case Study</value><value>Command-Line</value><value>Git</value></tags></item><item><title><value>Managing transient dependencies</value></title><author><value>Joel Christiansen</value></author><description><value>Python packaging has come a long way since the days of easy_install and eggs. With the advent of wheels, and more recently pyproject.toml and PEPs 518, 517, and 621, the future looks bright for the world of python build tool. I will briefly explore the history of python packaging, and look at how we can take advantage of these developments to increase reliability and safety in python build tools.</value></description><date>July 2021</date><tags><value>Best Practice</value><value>Packaging</value><value>python</value></tags></item><item><title><value>Learn from LL(1) to PEG parser the hard way</value></title><author><value>Kir Chou</value></author><description><value>Detailed description</value><value>In late 2019, Guido van Rossum wrote a series of articles about PEG parser and gave the talk "Writing a PEG parser for fun and profit" in a couple of conferences, such as North Bay Python, mentioned the motivation of his research and prototype of PEG parser. In late 2020, other authors of PEP 617, Pablo Galindo and Lysandros Nikolaou, (created around mid of 2020) were interviewed on Podcast.__init__ to talk about the result of the new PEG parser in CPython.</value><value>Above contents assume the audience with solid compiler fundamental knowledge, but the fact is most People, including this talk's speaker, are not specialized in compiler. And another fact is most of the compiler class in school around the world only covers traditional top-down and bottom-up parsing techniques, not to mention PEG parser that appeared in the early 2000s.</value><value>For the above reasons, the speaker will stand on the shoulders of giants and share his hard way after a few months of study. He will talk about the fundamentals of Parser (part of compiler frontend), including CFG, traditional parsing techniques, PEG, Packrat parser, and PEG parser in CPython.</value></description><date>July 2021</date><tags><value>CPython</value><value>Compiler and Interpreters</value><value>Python 3</value></tags></item><item><title><value>Learn CPython by breaking it</value></title><author><value>Cristián Maureira-Fredes</value></author><description><value>One of the main reasons that stop people to write Python C extensions                               </value><value>and even attempt to contribute to CPython is due to the fact that                                   </value><value>you need to know another programming language, C.                                                   </value><value>                                                                                                                                                                                                                                             </value><value>Wait, don't go! don't be scared by the fact that you will hear                                      </value><value>about C, this talks objective is not that! but only to learn                                        </value><value>the essential bits to get more comfortable around CPython.                                          </value><value>                                                                                                    </value><value>By understanding the internals, you will feel like the same as that time                            </value><value>in your childhood when you took something apart, then re-assemble it                                </value><value>again and it worked (if that was not the case, this will be your first time                         </value><value>I promise).                                                                                         </value><value>                                                                                                    </value><value>During this talk, you will go on a journey to understand how Python works,                          </value><value>and which are the places you can look to understand the implementation of                           </value><value>different Python details, from the whole interpretation process, until                              </value><value>look what's lies under the module/types functions you use everyday.                                 </value><value>You will get the power to add new functionality to Python and even how to                           </value><value>create your first C-based extension module.                                                         </value><value>                                                                                                    </value><value>If you are not familiar with C, don't worry, I will guide you every time                            </value><value>some C code is shown, and if you know some C, then you will be able                                 </value><value>to sit back and relax during this ride.</value></description><date>July 2021</date><tags><value>C-Languages</value><value>CPython</value><value>Compiler and Interpreters</value><value>Data Structures</value><value>Fun and Humor</value></tags></item><item><title><value>Introduction to Quantum Deep Learning</value></title><author><value>Abhilash Majumder</value></author><description><value>Introduction to Quantum Deep Learning</value><value>Abstract</value><value>The aim of the lightning talk is to shed light into the field of Quantum computation in the field of Deep Learning. Qubits , which form the fundamental units of quantum computing can be used to create quantum variational circuits which can be placed over traditional deep learning networks to create hybrid quantum-deep learning models. These models not only rely on the gradient convergence properties of general backpropagation technique, but also on the final probabilistic states of the Qubits. Essentially there has been quite a development to optimize the gradient convergence of these hybrid models with the help of Fischer approximation and Natural Gradient Descent.The talk would focus on the importance of Quantum Variational Deep Learning Circuits and how they provide an advantage over traditional Autograd based Circuits. The application of Quantum Variational circuits in the field of Reinforcement Learning as well as NLP would be one of the main points of the talk. There has been sufficient development in the field of quantum computing and this talk aims to throw light on how to exploit the probabilistic states of Qubits to enhance deep learning models.</value></description><date>July 2021</date><tags><value>Deep Learning</value><value>Generative Adversarial Networks</value><value>Machine-Learning</value><value>Natural Language Processing</value><value>python</value></tags></item><item><title><value>Introducing Asynchronous SQLAlchemy</value></title><author><value>Sebastiaan Zeeff</value></author><description><value>With the increasing popularity of asynchronous frameworks, such as FastAPI, communicating asychronously with databases has become a hot topic in Python development. While there were already a lot of database drivers with asynchronous support available, support for asynchio in Object-Relation Mapping (ORM) frameworks was a lot rarer. That is, until the release of version 1.4 of SQLAlchemy back in March of 2021, which added support for Asynchronous I/O to one of the most popular ORM frameworks for Python.</value></description><date>July 2021</date><tags><value>ASYNC / Concurreny</value><value>Databases</value><value>Python 3</value><value>SQL Alchemy</value><value>Tooling</value></tags></item><item><title><value>Innovation in the newsroom</value></title><author><value>Ben Nuttall</value></author><description><value>In BBC News Labs, we're always looking for ways to innovate without requiring production teams to change their workflows. We investigated ways we could enrich our digital output by extracting detailed information about the contents of our TV and radio programmes from their running orders.</value></description><date>July 2021</date><tags><value>Abstractions</value><value>Open-Source</value><value>Public Cloud</value><value>python</value></tags></item><item><title><value>Improved web scraping with Python tools and Bash utilities.</value></title><author><value>Riya</value></author><description><value>What is a web scraping and why should you learn how to do it?</value><value> </value><value>I will talk about what it means to scrape data from the web and what is wrong with go-to copy-paste techniques. This will also cover various benefits of web-scraping, not only for work, but also how it can help to make your life simpler: using it for job-searching, product price monitoring, and collecting data to train ML models.</value><value> </value><value>This talk will first cover the basics like using CSS Selectors for parsing data.</value><value> </value><value>I will cover how to use developer tools to look for a tag, class, or id to target the required data.</value><value> </value><value>I will also go through some basics of Regex which can be very useful in targeting required data.</value><value> </value><value>After building up the base for web-scraping, I’ll show you some of the major tools including requests, BeautifulSoup, Selenium, Scrapy in an interactive manner, where you can follow along, as we build up from the most user-friendly tools like requests and BeautifulSoup to more specialized tools.</value><value>We’ll go a step further in this process and take a brief look at more complex topics. I  will cover the problems that you will come across while scraping, such as asynchronous loading and client-side rendering, authentication, redirects, captchas, etc, and their possible workarounds. Finally, I’ll show how to automate web-scraping tasks using cron (Linux) and Task Scheduler (Windows).</value><value> </value><value>You’ll leave the talk with a good understanding of the techniques of web scraping, and a library of useful tools you can use to write your own scrapers.</value></description><date>July 2021</date><tags><value>Command-Line</value><value>HTML5</value><value>Linux</value><value>Python 3</value><value>Web Crawling</value></tags></item><item><title><value>Hypertag: an Indented Language for easy HTML Generation &amp; Web Templating</value></title><author><value>Marcin Wojnarski</value></author><description><value>HYPERTAG (</value><value>) is a full-featured standalone language for HTML templating and document generation. Inspired by indentation-based template languages (Slim, Haml, Shpaml, Pug), it provides clean, readable syntax and multiple original features that enhance code reuse and modularity: native custom tags, DOM manipulation, Python-like granular imports, control blocks, compound expressions, and more.</value></description><date>July 2021</date><tags><value>Clean Code</value><value>Django</value><value>Templating</value><value>Web</value><value>Web General</value></tags></item><item><title><value>How I helped fly a helicopter on Mars</value></title><author><value>Joost Lek</value></author><description><value>Open source code is the foundation for a lot of my own work, but of course also the work of others. And the beauty of open source is you never know where your contributions end up. This story begins in the summer of 2019 when I wanted to see if I could contribute to the python project I’ve been using so much. In this talk I’ll walk you through the challenges I faced making my first contribution to cpython, picking a bug and squashing it. I’ll end the talk explaining the title: after viewing the 2020  mars helicopter fly on the red planet I realized I have a new badge on my github page. I never started out thinking I could have my code flying in space, let alone flying on mars. But it does. I hope to inspire others to step over the hurdle and contribute back to the open source tools they use.</value></description><date>July 2021</date><tags><value>Development</value><value>Open-Source</value><value>python</value></tags></item><item><title><value>How Scientific Computing is advancing the world of Football</value></title><author><value>Chiin-Rui Tan</value><value>Sara Nunnington</value></author><description><value>In the ultra-competitive sporting world, the value of data and computing has been on the rise. When the difference between winning and losing, success and failure hinges on the smallest of margins, being able to calculate and implement optimal, timely decisions is literally game-changing, and potentially life-changing.</value></description><date>July 2021</date><tags><value>Computer Vision</value><value>Data Science</value><value>Machine-Learning</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value><value>Visualization</value></tags></item><item><title><value>Hiring Demystified</value></title><author><value>Mar Bartolome</value></author><description><value>It's no secret that the hardest problems in computer science are cache invalidation and naming things... oh, and hiring.</value></description><date>July 2021</date><tags><value>Diversity</value><value>Job Hunting</value><value>Management</value><value>Workforce</value></tags></item><item><title><value>High Performance Data Processing with Python, Kafka and Elasticsearch</value></title><author><value>Harshit Prasad</value></author><description><value>In the current technology era, all kind of applications work on data. Data is used to represent a set of information. The healthcare apps, e-commerce apps etc works on data. Sometimes, this data needs to be get updated to reflect new changes across the platform. This action can be performed manually but what if platform data is getting updated in realtime or let’s say in every 1 hour? Such kind of problem can be solved by implementing a service based on Producer Consumer model.</value></description><date>July 2021</date><tags><value>E-Commerce</value><value>Elastic Search</value><value>Engineering</value><value>EuroPython</value><value>Messaging and Job Queues (RabbitMQ/Redis/...)</value></tags></item><item><title><value>Django with PostgreSQL superpowers</value></title><author><value>Paolo Melchiorre</value></author><description><value>Every time we’re going to create a new project with Django we make assessments on its requirements to choose the best architecture, of which, the database is usually the core.</value></description><date>July 2021</date><tags><value>Best Practice</value><value>Databases</value><value>Django</value><value>PostgreSQL</value></tags></item><item><title><value>DIY Home Automation with Microcontrollers and CircuitPython</value></title><author><value>Maria Jose Molina-Contreras, PhD</value></author><description><value>For many years, people have been filling their home with devices that are based on Microcontrollers, like virtual assistants, smart fridges, washing machines, security systems, and many others that can be either programmable, or even replicated with a couple of boards and our Python knowledge.</value><value>During this talk, we will start exploring CircuitPython without the need of a physical device, using a microcontroller emulator.  If you are new to the microcontroller world, don’t worry, we will have an introduction to the main concepts, so we have the base knowledge to start doing little experiments by ourselves.</value><value>After the introduction, you will be able to start programming microcontrollers using the emulator or in real life, moreover, you will see a couple of real projects (with real devices!) that could easily be replicated by yourself: a low-cost robot floor cleaner, and a plant watering and monitoring system, as examples.</value></description><date>July 2021</date><tags><value>DIY</value><value>Hardware/IoT</value></tags></item><item><title><value>Developing Flask Applications for Google Cloud</value></title><author><value>Abby Carey</value></author><description><value>Learn how to build Flask apps for Cloud Run, one of Google Cloud's serverless platforms. To accelerate the Cloud Run development loop, we'll be using Cloud Code, an IDE plugin that makes working with Cloud Run easy. We'll also cover how to integrate products like Cloud SQL, Pub/Sub, and Secret Manager.</value></description><date>July 2021</date><tags><value>Public Cloud</value><value>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</value><value>python</value></tags></item><item><title><value>Develop and deploy a Machine Learning pipeline in 30 minutes with Ploomber</value></title><author><value>Eduardo Blancas</value></author><description><value>** Description **</value></description><date>July 2021</date><tags><value>Best Practice</value><value>Data Science</value><value>Deployment/Continuous Integration and Delivery</value><value>Machine-Learning</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>Designing secure APIs</value></title><author><value>Roberto Polli</value></author><description><value>## Goal</value></description><date>July 2021</date><tags><value>APIs</value><value>Case Study</value></tags></item><item><title><value>Designing Functional Data Pipelines for Reproducibility and Maintainability</value></title><author><value>Chin Hwee Ong</value></author><description><value>When building data pipelines at scale, it is crucial to design data pipelines that are reliable, scalable and extensible according to evolving business needs. Designing data pipelines for reproducibility and maintainability is a challenge, as testing and debugging across compute units (threads/cores/computes) are often complex and time-consuming due to dependencies and shared states at runtime. In this talk, Chin Hwee will be sharing about common challenges in designing reproducible and maintainable data pipelines at scale, and exploring the use of functional programming in Python to build scalable production-ready data pipelines that are designed for reproducibility and maintainability. Through analogies and realistic examples inspired by data pipeline designs in production environments, you will learn about:</value></description><date>July 2021</date><tags><value>Data</value><value>Functional Programming</value><value>Python 3</value></tags></item><item><title><value>Dependency Injection: Stealing Cool stuff from the Weird Kids</value></title><author><value>Bojan Miletic</value></author><description><value>While dependency injections is widely used in other programming languages, it's a design pattern that is nowhere near as popular in Python. During this talk I would like to introduce you to this concept and show you how it can improve your engineering skills.</value></description><date>July 2021</date><tags><value>Architecture</value><value>Best Practice</value><value>Python general</value><value>Software Design</value></tags></item><item><title><value>Data lake: Design for schema evolution</value></title><author><value>Prakshi Yadav</value></author><description><value>Designing a data lake necessitates well-researched storage, management, scalability, and availability solutions. However, managing schema evolution remains a difficult task. The structure of data differs from one company to the next, making it difficult to generalize a solution to the schema evolution problem.</value></description><date>July 2021</date><tags><value>Architecture</value><value>Best Practice</value><value>Big Data</value><value>Data</value><value>Public Cloud</value></tags></item><item><title><value>Darts: Unifying time series forecasting models from ARIMA to Deep Learning</value></title><author><value>Gael Grosch</value><value>Francesco Lässig</value></author><description><value>Time series are everywhere in science and business, and the ability to forecast them accurately and efficiently can provide decisive advantages. For much of its history, time series forecasting has mostly been relying on "classical" statistical methods such as ARIMA. These methods work very well in many cases, but they are not appropriate for capturing patterns in large quantities of data. Very recently, some deep learning techniques have been proposed as a way to build very advanced and accurate models from large quantities of time series data. </value></description><date>July 2021</date><tags><value>Data Science</value><value>Deep Learning</value><value>Machine-Learning</value><value>Open-Source</value><value>Python 3</value></tags></item><item><title><value>Creating the Next Generation of Billionaires-Part 3</value></title><author><value>lil anonymous</value></author><description><value>Our generation of young people in school (aged 5-18) have noticed the connection between Computer pRogramming, Technology, Bitcoinsm Success and Billionaires. </value></description><date>July 2021</date><tags><value>Beginners</value><value>Education</value><value>EuroPython</value><value>python</value></tags></item><item><title><value>Create beautiful and localized documentations and websites using MkDocs + Github</value></title><author><value>Alexys Jacob</value></author><description><value>In this talk I will walk you through all the steps needed to create and host feature rich and localized documentations (and even websites) using MkDocs + Github Pages.</value></description><date>July 2021</date><tags><value>Community</value><value>Documentation</value><value>Internationalization</value><value>Open-Source</value><value>Tooling</value></tags></item><item><title><value>Continuous Documentation for your code</value></title><author><value>Anastasiia Tymoshchuk</value></author><description><value>Do you document your code? Do you think it is important?</value></description><date>July 2021</date><tags><value>Best Practice</value><value>Python general</value></tags></item><item><title><value>Computational Complexity Theoretical Foundation on How Long Will Program Run</value></title><author><value>Kautilya Katariya</value></author><description><value>Online teaching materials enable learning programming at any age. Kautilya, a 7-year-old programmer who has learned his way through multiple courses in Python and Artificial Intelligence, shares his takeaways and examples so that we can learn what he has learned about Computational Complexity.</value><value> In this talk, he focuses on the time complexity in computational/algorithmic complexity. As he lays out the theoretical foundations of how we formally measure how fast a program or algorithm runs, he teaches us to analyse the amount of time our program creation choices have on how much time program will take to finish.</value></description><date>July 2021</date><tags><value>Algorithms</value><value>Data-Structures</value><value>Education</value><value>Programming</value><value>Python 3</value></tags></item><item><title><value>Code From Nothing: Procedural Generation of Python Source Code</value></title><author><value>Kirill Borisov</value></author><description><value>This talk will be about using Hypothesis and tools derived from it to test existing Python linters and fixers. While it is possible to test them by using hand-crafted pieces of code, sheer expression power of Python makes it very hard to think about every corner case that can be encountered. Even mature, widely-used tools like black or (gasp!) Python parser still manage to get it wrong.</value></description><date>July 2021</date><tags><value>Code Analysis</value><value>Compiler and Interpreters</value><value>Python 3</value><value>Python Skills</value><value>python</value></tags></item><item><title><value>Building Brain-Computer Interfaces with Timeflux</value></title><author><value>Pierre Clisson</value></author><description><value>Brain-Computer Interfaces (BCIs) enable people to interact with physical devices by using their mind only. For a long time, building such systems has been the prerogative of the academic world, and has required cumbersome tools and expensive hardware. It is now time to get BCIs out of the lab and into the hands of programmers.</value></description><date>July 2021</date><tags><value>Data Science</value><value>Human-Machine-Interaction</value><value>Machine-Learning</value><value>Open-Source</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>Building Application using Flutter and Django</value></title><author><value>Shruti Mishra</value><value>Sonal Deshmukh</value><value>Gourika Sood</value></author><description><value>The proposed project is both a web and a mobile application. The web application makes use of the Django framework for its structure and backend. The mobile application uses Flutter, which is a cross-platform for both iOS and Android. The basis of the application would mainly be concerned as use for Educational Institutes. </value><value>The application also projects an important feature, that is, Smart Attendance System. The proposed system keeps track of attendance using barcodes. It uses openCV to scan the barcodes. System stores student attendance details and generates a brief report for the administrator. The libraries used for the project are: openpyxl, cv2, pyzbar, xlsxwriter.</value></description><date>July 2021</date><tags><value>Cross-Platform-Development</value><value>Databases</value><value>Django Projects</value><value>Python 3</value><value>Web</value></tags></item><item><title><value>Building a clean, maintainable and tested code base</value></title><author><value>Julian Camilleri</value></author><description><value>An introduction to how to write clean code (type hinting, docstrings, inline comments et cetera) and supporting the clean code with maintainable project structure and unit tests.</value></description><date>July 2021</date><tags><value>Best Practice</value><value>Clean Code</value><value>TDD</value><value>Teaching</value></tags></item><item><title><value>Build Your First Cyber Forensic Application using Python</value></title><author><value>Gajendra Deshpande</value></author><description><value>A recent study by CheckPoint Research has recorded over 1,50,000 cyber-attacks every week during the COVID-19 pandemic. There has been an increase of 30% in cyber-attacks compared to previous weeks. The pandemic has been the main reason for job loss and pay cuts of people and has led to an increase in cybercrimes. Examples of cyber-attacks include phishing, ransomware, fake news, fake medicine, extortion, and insider frauds. Cyber forensics is a field that deals with the investigation of digital crimes by analyzing, examining, identifying, and recovering digital evidence from electronic devices and producing them in the court of law. Python has a great collection of built-in modules for digital forensics tasks. The talk begins with an introduction to digital crimes, digital forensics, the process of investigation, and the collection of evidence. Next, I will cover the various python modules and built-in functions required to build your first cyber forensic application. The modules covered in the discussion are pyscreenshot, PIL, secrets, argparse, hashlib, os,csv, logging, time, sys, stat and NLTK. Finally, I will demonstrate using code walk through the sample cyber forensic application.</value></description><date>July 2021</date><tags><value>Cryptography</value><value>Data Privacy</value><value>Natural Language Processing</value><value>Security</value></tags></item><item><title><value>Build Serverless Python Applications using AWS Chalice</value></title><author><value>Harsh Bardhan</value></author><description><value>With the rise of Serverless Applications, Developers now focus on developing the Code Logic and allow their Cloud Service Provider to focus on the deployment. Serverless exactly doesn’t mean that there are no servers. It just means that we don’t need to provision and maintain them. The Cloud Service Provider takes care of packaging and deployment almost instantaneously.</value></description><date>July 2021</date><tags><value>APIs</value><value>DevOps general</value><value>RESTful</value><value>Web General</value><value>serverless</value></tags></item><item><title><value>Big Imagery Data Visualization with Gradient-weighted Class Activation Maps</value></title><author><value>Thomas Y. Chen</value></author><description><value>Machine learning and artificial intelligence have enabled many solutions that tackle real-world problems, from climate change to autonomous vehicle development. However, with any new technology comes novel issues to address, and in the consideration of machine learning, a recurring concern is the interpretability of the models. Particularly, this refers to the ability of humans, and especially end users of the technology, to understand how the model came to its decision. One way of opening up “black box models” (algorithms that are relatively uninterpretable) that are trained on imagery (computer vision models) is to create saliency maps that are qualitative, visual representations of which parts of each image had the most influence in the deep learning model’s prediction for that image. In this talk, we discuss one interesting way of achieving this. After training a convolutional neural network (CNN) using PyTorch on an image dataset (which can be anything, such as ImageNet), we explore using the GradCam repository to create gradient-weighted class activation maps, which harness the CNN and uses the gradients of any target concept, flowing into the final convolutional layer to produce a coarse localization map highlighting important regions in the image for predicting the concept. It is recommended that attendees of this talk are familiar with at least the basics of machine learning, deep learning, and computer vision, but the presentation will not be too technical as to encourage less experienced folks.</value></description><date>July 2021</date><tags><value>Algorithms</value><value>Computer Vision</value><value>Deep Learning</value><value>Machine-Learning</value></tags></item><item><title><value>Automatic Testing of Python Functions Based on Contracts</value></title><author><value>Marko Ristin</value><value>Phillip Schanely</value><value>Lauren De bruyn</value></author><description><value>Good programs are correct programs. Testing is an indispensable tool making sure that the software we produce is correct. The bulk of today’s Python programs are tested using unit tests, on a case-by-case basis. While unit tests are important, thorough tests are tedious to write. A lot of edge cases need to be considered and human errors easily slip in.</value></description><date>July 2021</date><tags><value>Code Analysis</value><value>Programming</value><value>Software Design</value><value>Testing</value></tags></item><item><title><value>Automated Machine Learning With Keras</value></title><author><value>Ondrej Urban</value></author><description><value>During my first steps in the field I was promised that machine learning would be automated from the beginning. Unfortunately, once I’ve outsourced looking for the parameters that best matched my data to the machines, I was instead left with having to look for the hyperparameters that define the best model architecture, all by myself. This often ends up being a lengthy manual process. Is there a way to outsource this bit too?</value></description><date>July 2021</date><tags><value>Data Science</value><value>Deep Learning</value><value>Machine-Learning</value></tags></item><item><title><value>Auto-Sklearn: Automated Machine Learning in Python</value></title><author><value>Matthias Feurer</value><value>Katharina Eggensperger</value></author><description><value>AutoML makes machine learning accessible for everyone!</value></description><date>July 2021</date><tags><value>Data Science</value><value>Machine-Learning</value><value>Science</value><value>Scientific Libraries (Numpy/Pandas/SciKit/...)</value></tags></item><item><title><value>All things esports and competitive gaming and game development in Python</value></title><author><value>Koketso Motse</value></author><description><value>This talk will cover:</value><value>Game development in python</value><value>Game design in python</value><value>Competitive gaming and esports</value></description><date>July 2021</date><tags><value>Beginners</value><value>Game-Development</value><value>Python 3</value></tags></item><item><title><value>Analyzing COVID Vaccine Popularity in Europe Using FastAPI, Postgres &amp; Azure</value></title><author><value>Rabeea Emad</value></author><description><value>FastAPI is one of the fastest growing Python web frameworks – in part due to its ease of usage and high performance. In this talk, I will teach you how you can rapidly process European covid vaccine popularity data using Fire, place it into Azure Database for Postgres (for free!) and then leverage FastAPI  to serve them through a back-end. Finally, I will launch the backend online through Azure App Service and use Jupyter to visualize the data from the API to answer interesting questions! Come join me and let the adventure begin!</value></description><date>July 2021</date><tags><value>Public Cloud</value><value>Web</value><value>python</value></tags></item><item><title><value>An Introduction to Kubernetes ☸️</value></title><author><value>Markus Holtermann</value></author><description><value>Every other job opening for an IT position mentions Kubernetes. But unless you’ve worked with Kubernetes or seen it in action, you probably only have a vague idea of what it is, what it does and can do, or how to use it. And that’s understandable. It’s this big, abstract, software, that is supposed to “solve all the problems”. In this talk I’ll go through some of the concepts Kubernetes has. We’ll approach these by deploying a Django application, with the intent, that next time somebody asks you, “Do you know Kubernetes?”, you can confidently answer “Yes!”.</value></description><date>July 2021</date><tags><value>DevOps general</value><value>Infrastructure</value><value>Operations</value></tags></item><item><title><value>Adventures in Real-time Python NoSQL-style</value></title><author><value>Christoph Dr. Zimmermann</value></author><description><value>The presentation introduces RedisGears, a novel approach to Python programming on the server side of an open source real-time NoSQL database. </value><value>Ten years in the making, redis has achieved a significant following among the community concerned with ultra-fast processing of NoSQL-based data. </value><value>With the advent of modules a few years back, redis can be further extended to bridge the gap between the comprehensive set of data structures already offered by the server core and application-specific requirements such as graphs, timeseries data or full-text search capabilities. RedisGears is such a module. At its core, it offers a flexible infrastructure allowing the combination of different modules in addition to scheduling, mapping, filtering and other functionality to process data on the server side. In addition, it allows the execution of Python code on server side, yielding an ultra-performant and flexible approach to the implementation of business logic as part of an application code base. </value></description><date>July 2021</date><tags><value>APIs</value><value>NoSQL</value><value>Python 3</value><value>The Answer to Life the Universe and Everything Else</value></tags></item><item><title><value>A Tale Of Python C Extensions And Cross-Platform Wheels</value></title><author><value>Vinayak Mehta</value></author><description><value>Have you ever wondered why Python is referred to as CPython and what is the Python C-API everyone keeps talking about? Come to this talk and find out! We'll briefly take a look at the C-API, how we can use it to extend Python's functionality, and how we can write Python C extensions using pybind11.</value></description><date>July 2021</date><tags><value>CPython</value><value>Development</value><value>Packaging</value><value>PyPi</value><value>Tooling</value></tags></item><item><title><value>A Hitchhiker’s Guide to functools</value></title><author><value>Scott Irwin</value></author><description><value>A Hitchhiker’s Guide to functools</value></description><date>July 2021</date><tags><value>Functional Programming</value></tags></item><item><title><value>A Gentle Introduction To Causal Inference</value></title><author><value>Eyal Kazin</value></author><description><value>Correlation does not imply causation. It turns out, however, that with some simple ingenious tricks one can unveil causal relationships within standard observational data, without having to resort to expensive random control trials. </value></description><date>July 2021</date><tags><value>Analytics</value><value>Data Science</value></tags></item><item><title><value>A crowdsourced map for checking supermarket wait times worldwide</value></title><author><value>Miki Lombardi</value></author><description><value>In March 2020 the world is completely blocked and people are lining up to shop or to the pharmacy or to buy basic necessities.</value></description><date>July 2021</date><tags><value>Analytics</value><value>Case Study</value><value>Data</value><value>Development</value><value>HTTP</value></tags></item><item><title><value>Python the Bad Parts</value></title><author><value>Joannah Nanjekye</value></author><description><value>Python is great but it definitely has faults too. In this talk, I will talk about some of the Python challenges as a language, and the current efforts in the community to alleviate them. I will also talk about how I plan to engage scientists and academics during my time on the PSF board, to highlight some of the research we are working on as a community.</value></description><date>July 2021</date><tags><value>Community</value><value>python</value></tags></item><item><title><value>Python in a world of Pan-Africanism</value></title><author><value>Abigail Dogbe</value></author><description><value>The use of Python in Africa is widely spread daily. In this talk, I will take you on a journey of what Python means to us in a Pan-African setting, lessons learned from organizing PyCon Africa, the people behind it, challenges we are facing and reflections on what works in our ecosystem.</value></description><date>July 2021</date><tags><value>Community</value><value>Conferences and Meet-Ups</value><value>python</value></tags></item><item><title><value>Our Universe through Sight, Sound &amp; Touch</value></title><author><value>Kimberly Arcand</value></author><description><value>Information of our Universe doesn't have to be just a two-dimensional snap shot. We can transform these data to be able to listen, feel, or (virtually) move through cosmic objects.  Listen to the debris from an exploded star, walk through the core of our Milky Way in virtual reality, feel vibrations of a stellar nursery, and experience our universe anew.</value></description><date>July 2021</date><tags><value>Natural Science</value><value>Science</value><value>Visualization</value></tags></item><item><title><value>Nobody expects the Spanish inquisition</value></title><author><value>Pablo Galindo Salgado</value></author><description><value>In this talk I will go into some interesting stories of how (C)Python is made. We will go through a journey that will show you how Python is developed, who works on it, interesting battles against the most obscure of bugs and lots of unexpected situations and things to learn and to reflect on.</value></description><date>July 2021</date><tags><value>CPython</value><value>python</value></tags></item><item><title><value>No, not typing. Types.</value></title><author><value>David Beazley</value></author><description><value>While biking through the forest preserve on a dark December morning, I found myself suddenly staring face-to-face with Bambi.  Picking myself off the ground with a broken wrist and an assortment of broken fingers, I embarked on an unexpected journey of discovery.   Then the pandemic hit.   In this talk, I provide a trip report.</value></description><date>July 2021</date><tags><value>math</value></tags></item></items>